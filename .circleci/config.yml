version: 2.1
executors:    # common executor docker build and docker push jobs
    docker-publisher:
      docker:
        - image: circleci/buildpack-deps:stretch
 
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point
    
    working_directory: ~/circleci-spring-jenkins-kubernetes # directory where steps will run

    docker: # Docker executor with Java bases Image
      - image: circleci/openjdk:8-jdk-stretch 

    steps: # a collection of executable commands

      - checkout # check out source code to working directory
#      - setup_remote_docker # to run docker build commands in the remote circle ci machine

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: circleci-spring-jenkins-kubernetes-{{ checksum "pom.xml" }}
      
      - run: mvn dependency:go-offline # gets the project dependencies
      
      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-spring-jenkins-kubernetes-{{ checksum "pom.xml" }}
      
      - run: mvn clean package # run the actual tests
      
      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
 
      
      - persist_to_workspace:    # Persist the Dockerfile and Spring fat jar for next job in the workflow. Else they are lost.
          root: .
          paths:
            - Dockerfile
            - target/demo-0.0.1-SNAPSHOT.jar

          
  build-image:
    executor: docker-publisher  # use the executor defined at the start
    steps:
      - attach_workspace:    # get the Dockerfile and the fat jar
              at: .
      - setup_remote_docker        # make sure you can run docker commands
      - run:
          name: Build and tag docker image
          command: |
            docker build -f ./Dockerfile -t springboot-jenkins:latest .
            docker tag springboot-jenkins hiteshjoshi1/springboot-jenkins:latest
      - run:
           name: Create an Image archive - tar
           command: docker save -o image.tar hiteshjoshi1/springboot-jenkins:latest     
      - persist_to_workspace:      # Save the tar for next step
              root: .
              paths:
                - ./image.tar     
  
  # new workflow step
  publish-dockerhub:
    executor: docker-publisher
    steps:
      - attach_workspace:
            at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Push docker image to Docker Hub # DOCKERHUB_PASS and DOCKERHUB_USERNAME are environment variables created in project for circleci
          command: |
                echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                IMAGE_TAG="0.0.${CIRCLE_WORKFLOW_ID}"
                docker tag hiteshjoshi1/springboot-jenkins:latest hiteshjoshi1/springboot-jenkins:$IMAGE_TAG
                docker push hiteshjoshi1/springboot-jenkins:latest
                docker push hiteshjoshi1/springboot-jenkins:$IMAGE_TAG

  deploy:
    docker:
      - image: hiteshjoshi1/helm-image
    environment:
      AWS_DEFAULT_REGION: ap-southeast-1
    steps:
      - checkout
      - run:
          name: "Install dependecies"
          command: |
            apk add --update bash curl git python3
            curl -o /usr/local/bin/aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod 0755 /usr/local/bin/aws-iam-authenticator
            python3 -mpip install awscli
      - run:
          name: "Set version"
          shell: /bin/bash -eo pipefail
          command: |
            echo "export VERSION=$(git rev-parse --short HEAD)" >> $BASH_ENV
      - run:
          name: "Deploy to EKS"
          shell: /bin/bash -eo pipefail
          command: |
            helm upgrade \
              --kubeconfig .circleci/kubeconfig_env.yaml \
              --install tad-puppy ./demo-chart \
              --set-string image.tag="0.0.${CIRCLE_WORKFLOW_ID}" \
      - run:
          name: "Deploy Cleanup"
          shell: /bin/bash -eo pipefail
          command: |
            rm -f $BASH_ENV
          when: always 
               
workflows:
  version: 2
  build-push-dockerhub:
    jobs:
      - build:
          filters:
            branches:
                only: master   
      - build-image:
           filters:
             branches:
               only: master
           requires:
              - build     
      - publish-dockerhub:
           filters:
             branches:
               only: master  
           requires:
              - build-image 
      - deploy:
          requires:
            - publish-dockerhub
          filters:
            branches:
              only:
                - master         
